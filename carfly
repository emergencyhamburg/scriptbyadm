-- Car Fly avec bouton ON/OFF (Emergency Hamburg)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local mouse = LocalPlayer:GetMouse()

-- GUI
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local ToggleButton = Instance.new("TextButton", ScreenGui)

ToggleButton.Size = UDim2.new(0, 120, 0, 40)
ToggleButton.Position = UDim2.new(0, 10, 0.5, -20) -- à gauche de l'écran
ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ToggleButton.BorderSizePixel = 0
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Text = "Car Fly: OFF"
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.TextSize = 18

local flying = false
local speed = 100

local car -- variable pour la voiture (Model ou Part)
local bodyVelocity
local bodyGyro

-- Trouver la voiture du joueur (adapté à Emergency Hamburg)
local function findCar()
    local character = LocalPlayer.Character
    if not character then return nil end

    -- Cherche un véhicule dans Workspace, contrôlé par le joueur
    for _, v in pairs(workspace:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChild("DriverSeat") then
            local seat = v.DriverSeat
            if seat.Occupant and seat.Occupant.Parent == character then
                return v
            end
        end
    end
    return nil
end

local function startFly()
    car = findCar()
    if not car then
        warn("Tu n'es pas dans une voiture !")
        flying = false
        ToggleButton.Text = "Car Fly: OFF"
        return
    end

    local rootPart = car:FindFirstChild("PrimaryPart") or car:FindFirstChildWhichIsA("BasePart")
    if not rootPart then
        warn("Impossible de trouver la partie principale de la voiture.")
        flying = false
        ToggleButton.Text = "Car Fly: OFF"
        return
    end

    -- Ajout BodyVelocity et BodyGyro pour contrôler la voiture
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    bodyVelocity.Velocity = Vector3.new(0,0,0)
    bodyVelocity.Parent = rootPart

    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
    bodyGyro.CFrame = rootPart.CFrame
    bodyGyro.Parent = rootPart

    -- Contrôle dans RenderStep
    RunService:BindToRenderStep("CarFlyControl", Enum.RenderPriority.Input.Value, function()
        if not flying or not bodyVelocity or not bodyGyro then return end
        local moveDir = Vector3.new()

        if UIS:IsKeyDown(Enum.KeyCode.W) then
            moveDir = moveDir + workspace.CurrentCamera.CFrame.LookVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.S) then
            moveDir = moveDir - workspace.CurrentCamera.CFrame.LookVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.A) then
            moveDir = moveDir - workspace.CurrentCamera.CFrame.RightVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.D) then
            moveDir = moveDir + workspace.CurrentCamera.CFrame.RightVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.Space) then
            moveDir = moveDir + Vector3.new(0,1,0)
        end
        if UIS:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDir = moveDir - Vector3.new(0,1,0)
        end

        if moveDir.Magnitude > 0 then
            moveDir = moveDir.Unit
        end

        bodyVelocity.Velocity = moveDir * speed
        bodyGyro.CFrame = workspace.CurrentCamera.CFrame
    end)
end

local function stopFly()
    RunService:UnbindFromRenderStep("CarFlyControl")
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    if bodyGyro then
        bodyGyro:Destroy()
        bodyGyro = nil
    end
    car = nil
end

local function toggleFly()
    flying = not flying
    ToggleButton.Text = "Car Fly: " .. (flying and "ON" or "OFF")

    if flying then
        startFly()
    else
        stopFly()
    end
end

ToggleButton.MouseButton1Click:Connect(toggleFly)
